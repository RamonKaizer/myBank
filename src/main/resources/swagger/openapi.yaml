openapi: 3.0.3
info:
  title: BackEnd Banking Project Manager
  contact:
    email: ramon_kaiser_marques@hotmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080/v1
tags:
  - name: user
    description: Operations about user
  - name: transaction
    description: Operations about transfer

paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: Create user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUserResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /transaction:
    post:
      tags:
        - transaction
      summary: Make transfer
      description: make transfer between accounts
      operationId: makeTransfer
      requestBody:
        description: accounts and values
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'
      responses:
        "200":
          description: OK

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "502":
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    UserRequest:
      type: object
      properties:
        fullName:
          type: string
          example: John Kennedy
        email:
          type: string
          example: john@email.com
        password:
          type: string
          format: password
          example: '12345'
        cpfCnpj:
          type: string
          example: '12345678910'
          minLength: 11
          maxLength: 14
      required:
        - fullName
        - email
        - password
        - cpfCnpj

    CreatedUserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          description: "Nome do usuario"
        wallet:
          $ref: '#/components/schemas/Wallet'

    Wallet:
      type: object
      properties:
        accountNumber:
          type: string
          example: "4235652"
        balance:
          type: number
          format: decimal
          example: 992.95

    TransactionRequest:
      type: object
      properties:
        payer:
          type: integer
          format: int64
          example: 1
        payee:
          type: integer
          format: int64
          example: 2
        value:
          type: number
          format: decimal
          example: 99.95

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          example: 500
        description:
          type: string
          example: "Erro ao cadastrar Usu√°rio"
        detailedMessage:
          type: string
          example: "SQL Exception -- etc"